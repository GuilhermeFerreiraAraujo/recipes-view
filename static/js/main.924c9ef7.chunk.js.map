{"version":3,"sources":["Services/Client.js","Components/Components/RecipeCard/RecipeCard.js","Components/Components/TextBox/TextBox.js","Components/Components/CustomButton/CustomButton.js","Components/Components/RecipeSearch/RecipeSearch.js","Components/Views/Recipes/Recipes.js","Services/RecipesServices.js","App.js","serviceWorker.js","index.js"],"names":["appUrl","Get","params","url","options","method","headers","axios","RecipeCard","className","src","this","props","thumbnail","alt","title","ingredients","React","Component","TextBox","name","isMandatory","id","placeholder","type","onChange","error","CustomButton","disabled","onClick","handleClick","RecipeSearch","handleSearch","Recipes","state","recipes","searchQuery","page","getRecipes","bind","handleChange","tmpObj","i","q","p","queryString","Object","keys","map","key","join","Client","RecipeServices","then","response","setState","Array","from","data","results","catch","ex","console","log","event","target","value","x","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.924c9ef7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst appUrl = 'http://www.recipepuppy.com/api/';\r\n\r\nexport function Get(params) {\r\n\r\n    let url = appUrl ;\r\n\r\n    if (params) {\r\n        url += params;\r\n    }\r\n\r\n    let options = {\r\n        method: 'GET',\r\n        url: url,\r\n        headers: {\r\n            'Access-Control-Allow-Origin': '*'\r\n        }\r\n    };\r\n    \r\n    return axios(options);\r\n}\r\n\r\nexport default Get;","import React from 'react';\r\nimport './RecipeCard.css';\r\n\r\nexport class RecipeCard extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='recipe-card'>\r\n                <div className='recipe-card-thumbnail'>\r\n                    <img src={this.props.thumbnail} alt={this.props.title} />\r\n                </div>\r\n                <div className='recipe-card-details'>\r\n                    <h4>{this.props.title}</h4>\r\n                    <p>{this.props.ingredients}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default RecipeCard;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './TextBox.css';\r\n\r\nexport class TextBox extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <fieldset className='text-box'>\r\n                <label>{this.props.name}{this.props.isMandatory ? (<span className='mandatory'>*</span>) : ''}</label>\r\n                <input id={this.props.id}\r\n                    placeholder={this.props.placeholder}\r\n                    className='text-box-input'\r\n                    type='text'\r\n                    onChange={this.props.onChange}>\r\n                </input>\r\n                {this.props.error ? (<label className=\"text-box-error\">{this.props.error}</label>) : ''}\r\n\r\n            </fieldset>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nTextBox.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    isMandatory: PropTypes.bool\r\n}\r\n\r\nexport default TextBox;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './CustomButton.css';\r\n\r\nexport class CustomButton extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <button className={this.props.className ? this.props.className : 'btn-dark'} disabled={this.props.disabled} onClick={this.props.handleClick}>\r\n                {this.props.name}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nCustomButton.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    handleClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CustomButton;","import React from 'react';\r\nimport TextBox from '../TextBox/TextBox';\r\nimport CustomButtom from '../CustomButton/CustomButton';\r\nimport './RecipeSearch.css';\r\n\r\nexport class RecipeSearch extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='recipe-search'>\r\n                <h1>{this.props.title}</h1>\r\n\r\n                <div className='row text-center'>\r\n                    <div className='col-md-4 input-column'>\r\n                        <TextBox id='searchQuery'\r\n                            name='Key'\r\n                            placeholder='Enter key'\r\n                            onChange={this.props.onChange} />\r\n                    </div>\r\n                    <div className='col-md-4 input-column'>\r\n                        <TextBox id='ingredients'\r\n                            name='Ingredients'\r\n                            placeholder='Enter ingredients'\r\n                            onChange={this.props.onChange} />\r\n                    </div>\r\n                    <div className='col-md-4 button-column'>\r\n                        <CustomButtom name='Search'\r\n                            handleClick={this.props.handleSearch} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RecipeSearch;","import React from 'react';\r\nimport * as RecipeServices from '../../../Services/RecipesServices';\r\nimport RecipeCard from '../../Components/RecipeCard/RecipeCard';\r\nimport RecipeSearch from '../../Components/RecipeSearch/RecipeSearch';\r\nimport './Recipes.css';\r\n\r\nexport class Recipes extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: '',\r\n            recipes: [],\r\n            params: {\r\n                ingredients: '',\r\n                searchQuery: '',\r\n                page: ''\r\n            }\r\n        }\r\n\r\n        this.getRecipes = this.getRecipes.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getRecipes();\r\n    }\r\n\r\n    getRecipes() {\r\n        RecipeServices.GetRecipes(this.state.params).then(response => {\r\n            this.setState({\r\n                recipes: Array.from(response.data.results),\r\n                title: response.data.title\r\n            })\r\n        }).catch(ex => {\r\n            console.log(ex);\r\n        });\r\n    }\r\n\r\n    handleChange(event) {\r\n        let params = this.state.params;\r\n\r\n        params[event.target.id] = event.target.value;\r\n\r\n        this.setState({\r\n            params\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        let results = [];\r\n\r\n        if (this.state.recipes){\r\n            results = this.state.recipes.map(x => \r\n                <RecipeCard ingredients={x.ingredients}\r\n                    title={x.title}\r\n                    thumbnail={x.thumbnail}\r\n                    href={x.href}/>)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <RecipeSearch handleSearch={this.getRecipes}\r\n                    onChange={this.handleChange}\r\n                    title={this.state.title}/>\r\n                {results}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Recipes;","import * as Client from './Client';\r\n\r\nexport function GetRecipes(params) {\r\n\r\n    let tmpObj = {};\r\n    if (params.ingredients !== '' || params.searchQuery !== '' || params.page !== '') {\r\n\r\n        if (params.ingredients) {\r\n            tmpObj.i = params.ingredients;\r\n        }\r\n\r\n        if (params.searchQuery) {\r\n            tmpObj.q = params.searchQuery;\r\n        }\r\n\r\n        if (params.page) {\r\n            tmpObj.p = params.page;\r\n        }\r\n        var queryString = '?' + Object.keys(tmpObj).map(key => key + '=' + tmpObj[key]).join('&');\r\n    }\r\n    return Client.Get(queryString)\r\n}","import React from 'react';\nimport Recipes from './Components/Views/Recipes/Recipes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Recipes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}